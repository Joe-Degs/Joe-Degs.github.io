
over here what we really want to look at is the just the assembly of the code
we have written, so we compile the file into an object file `.o`  which is
just the binary representation of the code in the architecture we are compiling
to and nothing more. and this object file is in the elf file format.
Usually what the compiler does is it turns c code to object files, then it
invokes a linker which takes the object files and combines them into one big
executable binary file (except in the case of dynamic libraries).
I think its called a linker becuase when we write
code we write it in multiple files and most of the time each file cross
references each other.

- Now that the we have an object file lets take a look at the section thing we
  hinted up above. to see the different sections we use the `readelf` tool

Nice!. Well it turns out there are alot more of sections out there and they all
are important in their own ways. We only care about `.text, .data, .bss,
.rodata`.

- using the readelf tool lets take a look at the relevant sections and see if
  we can understand anything that's going on, we might not and i've made my
  peace with it.

everything from the outputs are just bunch of bytes. even the .text section
which contains executable instructions for the cpu. wild right!

- lets take a look at the disassembly of the data sections (.bss, .rodata,
  .data).
    $ riscv64-linux-gnu-objdump -z -S -D -j .data -j .bss -j .rodata main.o | less
<point out some things>

- and now let's take a look at the dissassembly of of the code (.text) section
    $ riscv64-linux-gnu-objdump -z -S -D -j .text main.o | less
well we compiled a function that did nothing and got back alot of assembly code
equally doing fuck all. but it will be interesting to figure out what all this
stuff mean anyway so let's take a few moments to dig in.
<the stuff going on is alot, probably draw some diagrams and try to make it
visually appealing for people to understand>

## mapping standard data widths in c to risc-v
the basic data types and their respective sizes in c are
- int    -> 2 bytes on 32 bit machines and 4 bytes on 64 bit machines
- char   -> 1 byte
- short  -> 2 bytes
- long   -> 4 bytes on 32 bit machines and 8 bytes on 64 bit machines
- float  -> 4 bytes
- double -> 8 bytes
these data types are the primitive types in c and for portable programs we are
generally advised to use uint8_t, uint16_t, uint32_t, uint64_t, __int128_t from
the `stdint.h` becuase these types unlike the other ones stay the same accross
different architectures. And because the compiler is very smart it figures out
most of this stuff so you don't have to figure them out yourself.
But you know me, I'm hard of hearing and like I'm used to doing, I am going to
peer into the nookies of compiled code to see how this data types map to 
underlying assembly and machine code. the machine architecture i'm using for
this is the sweet sweet RISC-V.



## rv-c-data
integers variables in c programming language.
overhere they are being compiled to object files and disassembled to look at
the resulting assembly code that is generated. it is pretty nifty. but we are
taking a look at the data section (.data, .bss) section of the object file.
riscv is little endian and so the low order byte is stored before the higher
order bit.

since this is data sections we are looking at it is safe to ignore the
instructions generated by objdump ( they are not correct )
this kind of makes a point, to the computer everything is data, whether its
code or actual data. And that is why the demarcation in virtual address space
segregate the various types of data present in executables into different
sections.

all the data stored is either 4 byte or 8 byte aligned.

if we take a look at the readelf .data section output, we can see that the
data is literally stored as little endian. the lowest byte (little end) of the
data appears first. `1200` is actually `0012`. fancy stuff right? If we take
a good look at the rest of the data we can see the same pattern over and over
again.

this code is compiled to run atop the riscv64 architecture. meaning integers
are 64bits wide. but we just declared `\__int128`. how do we get an 128 bit
integer on a 64 bit architecture. well the compiler coupled with the c library
is very smart and figures out how to do stuff like this. My guess is
`__int128` is just a struct of a two 64 bit integers representing low and high
4 bits respectively.

## rv-pointer
pointers in risc-v are dependent on the cpu architecture. on a 32 bit machine
pointer is 32 bits and vice versa.
from the code above `*p1` is a pointer with the value of `0x1234`
and `*p2` points to `a`.
if we take a look at the data section of our compiled code. we can see that
*p contains a value which is a memory address essentially.
*p2 on the other hand contains `0`. why is this the case? `i` is in the bss
section which is the place for unitialized data and zero values. The address 
of variables in .bss section is mostly zero (fact check me on this). And so
*p2 essentially hold an invalid memory address that will segfault if we try to
use it.
